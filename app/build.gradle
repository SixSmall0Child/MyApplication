apply plugin: 'com.android.application'

android {
    println("print in android is excuted...")
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.taoying.testapplication"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

println("print outside is  excuted")

dependencies {
    println("dependencies is excuted...")
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:recyclerview-v7:26.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task testprint{
    doFirst {
        println("doFirst testprint task is excuted....")
    }

    doLast {
        println("doLast testprint task is excuted....")
    }
    println("testprint task is excuted....")
}

/*class Delegate{
    def a (){
        println('print in Delegate#a()')
    }
}

def a(){
    println("print in root a()")
}

def cl = {
    a()
}
cl.delegate = new Delegate()
cl.call()*/

//===================================

//def b(Closure closure){
//    closure.call()
//}
//
//def cl = {
//    def c = {
//        println('print in cl closure ..c()')
//    }
//    b{
//        c()
//    }
//}
//
//cl.call()


def b = {
    println("print in root b()")
}

class Delegate{
    def b (){
        println('print in Delegate#b()')
    }

    def d (){
        println('print in Delegate#d()')
    }
}

class Foo {
    def b(){
        println('print in Foo ...b() ')

    }

    def c(Closure cl){
        cl.call()
    }
    def d(){
        println('print in Foo ...d() ')
    }
    def a = {
        println('print in Foo ...a() it = '+it)
        b()
        def d = {
            println('print in a closure ...d() ')
        }
        c{
            d()
        }
    }
}

def foo = new Foo()
foo.a.delegate = new Delegate()
foo.a.call()

//assemble.doLast {
//    println("print in dolast assemble")
//}